package com.nikhil.tacoclod.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.nikhil.tacoclod.jdbc.repositories.interfaces.IngredientRepocitories;
import com.nikhil.tacoclod.jdbc.repositories.interfaces.TacoRepository;
import com.nikhil.tacoclod.model.Ingredient;
import com.nikhil.tacoclod.model.Ingredient.Type;
import com.nikhil.tacoclod.model.Order;
import com.nikhil.tacoclod.model.Taco;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/design")
@SessionAttributes("order")
public class DesignTacoController {
	
	/* Undo the comment if you are using JDBC and comment JPA
	 * 
	 * private final IngredientRepocitories ingredientRepocitories; private
	 * TacoRepository tacoRepository;
	 * 
	 * @Autowired public DesignTacoController(IngredientRepocitories
	 * ingredientRepocitories,TacoRepository tacoRepository) {
	 * this.ingredientRepocitories=ingredientRepocitories; this.tacoRepository =
	 * tacoRepository; }
	 */
	
	private String HOME_URL = "design";
	private String REDIRECT_URL="/orders/current";
	
	@ModelAttribute(name="order")
	public Order order() {
		return new Order();
	}
	@ModelAttribute(name="taco")
	public Taco taco() {
		return new Taco();
	}

	/*
	 * @GetMapping public String showDesignForm(Model model) {
	 * 
	 * List<Ingredient> ingredients = Arrays.asList(new Ingredient("FLTO",
	 * "Flour Tortilla", Type.WRAP), new Ingredient("COTO", "Corn Tortilla",
	 * Type.WRAP), new Ingredient("GRBF", "Ground Beef", Type.PROTEIN), new
	 * Ingredient("CARN", "Carnitas", Type.PROTEIN), new Ingredient("TMTO",
	 * "Diced Tomatoes", Type.VEGGIES), new Ingredient("LETC", "Lettuce",
	 * Type.VEGGIES), new Ingredient("CHED", "Cheddar", Type.CHEESE), new
	 * Ingredient("JACK", "Monterrey Jack", Type.CHEESE), new Ingredient("SLSA",
	 * "Salsa", Type.SAUCE), new Ingredient("SRCR", "Sour Cream", Type.SAUCE));
	 * 
	 * Type[] type = Ingredient.Type.values();
	 * 
	 * for (Type type2 : type) { model.addAttribute(type2.toString().toLowerCase(),
	 * filterByType(ingredients, type2)); }
	 * 
	 * model.addAttribute("design", new Taco());
	 * 
	 * return HOME_URL; }
	 */
	
	@GetMapping
		public String showDesignForm(Model model) {
		model.addAttribute(HOME_URL,new Taco());		//this is very important to render html page
		List<Ingredient> ingredient = new ArrayList<>();
		System.out.println("Get Method DesignTaco");
		ingredientRepocitories.findAll().forEach(i->ingredient.add(i));
		
		Type[] types =Ingredient.Type.values();
		for (Type type : types) {
			model.addAttribute(type.toString().toLowerCase(),filterByType(ingredient, type));
		}
		return HOME_URL;
	}

	@PostMapping
	public String processDesign(@Valid @ModelAttribute("design") Taco design, Errors errors,@ModelAttribute Order order) {
		System.out.println("Processing Desing " + design);
		try{if (errors.hasErrors()) {		
			return HOME_URL;			
		}
		System.out.println("Processing Desing " + design);
		
		Taco saved=tacoRepository.save(design);
		order.addDesign(saved);
		}catch (Exception e) {
			System.out.println("PostMethod");
			log.info("PostMethod");
			e.printStackTrace();
		}

		return "redirect:"+REDIRECT_URL;
	}

	private List<Ingredient> filterByType(List<Ingredient> ingredients, Type type2) {

		return ingredients.stream().filter(x -> x.getType().equals(type2)).collect(Collectors.toList());
	}

}
